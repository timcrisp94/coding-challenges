/* * * PREFIX SUM / PRODUCT

- if the array is 1 2 3 4     -
-- the sumarray is 1 3 6 10  - -

- if the array is 1 2 3 4     -
-- productarray is 1 2 6 24  - -


- a zero value divides the array; resets variables
- a negative number turns all values negative, turns max to min; 
- - we can store the *first negative product* if we encounter a negative
- - if we encounter a negative again, find max by : max(prefix/negative, max) 
- * max represents the value of the negative divided by the prefix

n = nums.length
EC - IF n === 1 return nums[0]

- no negative values yet
- initial prefix value
- max = negative / prefix 

negative = 1
prefix = 1 
max = 0

FOR let i UPTO n
  prefix *= nums[i]
  max = max(prefix, max)
  IF prefix < 0
    max = max(prefix/negative, max)
    negative = negative == 1 ? prefix : negative
  ELIF prefix == 0
    prefix = 1
    firstN = 1
return max
  
*/

const maxProduct = function(nums) {
  const n = nums.length
  if (n === 1) return nums[0]

  let negative = 1
  let prefix = 1
  let max = 0

  for (let i = 0; i < n; i++) {
    prefix *= nums[i]
    max = Math.max(prefix, max)

    if (prefix < 0) {
      max = Math.max(prefix/negative, max)
      negative = negative == 1 ? prefix : negative
    } else if (prefix == 0) {
      prefix = 1
      negative = 1
    }
  }
  return max
}


console.log(maxProduct([2, 3, -2, 4]))